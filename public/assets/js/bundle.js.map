{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://cadastro/./src/scripts/create-acount.js"],"sourcesContent":["\r\nclass FormValidation{\r\n    constructor (){\r\n        this.form = document.querySelector('.form');\r\n        this.events();\r\n    }\r\n\r\n    //Capturar o evento de tentativa de validação do formulário\r\n    events() {\r\n        this.form.addEventListener('submit', e => {\r\n            this.handleSubmit(e)\r\n        });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        const validFields = this.validFields();\r\n        const passwordFieldsValid = this.validPassword();\r\n        if (validFields && passwordFieldsValid) {\r\n            alert('Formulário enviado')\r\n            this.form.submit();\r\n        }\r\n    }\r\n\r\n    validFields() {\r\n        let valid = true;\r\n\r\n        for (let errorText of this.form.querySelectorAll('.error-text')) {\r\n            errorText.remove();\r\n        }\r\n\r\n        for (let field of this.form.querySelectorAll('.valid')) {\r\n\r\n            let placeholder = field.getAttribute('placeholder');\r\n\r\n            if (!field.value) {\r\n                this.error(field, `Campo \"${placeholder}\" não pode estar vazio.`);\r\n                valid = false;\r\n            }\r\n\r\n            if (field.classList.contains('cpf')) {\r\n                if (!this.validateCPF(field)) valid = false;\r\n            }\r\n\r\n            if (field.classList.contains('username')) {\r\n                if (!this.validateUsername(field)) valid = false;\r\n            }\r\n        }\r\n\r\n        return valid;\r\n    }\r\n\r\n    validPassword() {\r\n        let valid = true; \r\n\r\n        const password = this.form.querySelector('.password');\r\n        const repeatPassword = this.form.querySelector('.repeat-password');\r\n\r\n        if (password.value !== repeatPassword.value) {\r\n            valid = false;\r\n\r\n            this.error(password, 'Campo \"Senha\" e \"Confirmar senha\" precisam ser iguais.');\r\n            this.error(repeatPassword, 'Campo \"Senha\" e \"Confirmar senha\" precisam ser iguais.');\r\n        }\r\n\r\n        if (password.value.length > 6 || password.value.length > 16) valid = false;\r\n\r\n        return valid;\r\n    }\r\n\r\n    validateUsername(field) {\r\n        const user = field.value;\r\n\r\n        let valid = true;\r\n\r\n        if (user.length < 3 || user.length > 16) valid = false;\r\n\r\n        if (!user.match(/^[a-zA-Z0-9]+$/g)) {\r\n            this.error(field, `\"Nome de usuário\" precisa conter apenas letras e/ou números.`)\r\n            valid = false;\r\n        } \r\n\r\n        //Verificar no futuro banco de dados se já existe um usuário com esse nome\r\n\r\n        return valid;\r\n    }\r\n\r\n    validateCPF(field) {\r\n        let valid = true;\r\n        const cpf = new ValidateCPF(field.value);\r\n\r\n        if(!cpf.valid()) {\r\n            this.error(field, 'CPF inválido');\r\n            return valid = false\r\n        }\r\n\r\n        return valid;\r\n    }\r\n\r\n    error(field, msg) {\r\n        const div = document.createElement('div');\r\n        div.innerHTML = msg;\r\n        div.classList.add('error-text');\r\n        field.style.border = '1.5px solid red';\r\n        field.insertAdjacentElement('afterend', div);\r\n    }\r\n    \r\n}\r\n\r\nconst validated = new FormValidation();\r\n\r\n/* \r\n    Atualizações: Colocar ponto no cpf de forma interativa\r\n        Animações\r\n        Arrumar o input senha\r\n        mover o placeholder pra cima quando focado\r\n                    \r\n*/\r\n\r\n/*\r\n    Código feito em aula da Udemy\r\n*/\r\n\r\nclass ValidateCPF{\r\n    constructor(cpf){\r\n        Object.defineProperty(this, 'cpfClear', {\r\n            writable: false,\r\n            configurable: false,\r\n            value: cpf.replace(/\\D+/g, '')\r\n        });\r\n    }\r\n\r\n    isSequence() {\r\n        return this.cpfClear.charAt(0).repeat(11) === this.cpfClear;\r\n    }\r\n\r\n    generateNewCPF() {\r\n        const cpf9Digits = this.cpfClear.slice(0, -2);\r\n        const firstDigit = ValidateCPF.gerateDigit(cpf9Digits);\r\n        const secondDigit = ValidateCPF.gerateDigit(cpf9Digits + firstDigit);\r\n        this.newCPF = cpf9Digits + firstDigit + secondDigit;\r\n    }\r\n\r\n    static gerateDigit(cpf9Digits) {\r\n        let total = 0;\r\n        let reverse = cpf9Digits.length + 1;\r\n\r\n        for (let stringOfCPF of cpf9Digits) {\r\n            total += reverse * Number(stringOfCPF);\r\n            reverse --;\r\n        }\r\n\r\n        const digit = 11 - (total % 11);\r\n        return digit <= 9 ? String(digit) : '0';\r\n    }\r\n\r\n    valid() {\r\n        if (!this.cpfClear) return false;\r\n        if (typeof this.cpfClear !== 'string') return false;\r\n        if (this.cpfClear.length !== 11) return false;\r\n        if (this.isSequence()) return false;\r\n        this.generateNewCPF();\r\n        \r\n        return this.newCPF === this.cpfClear;\r\n    }\r\n}\r\n\r\n//Mostra a senha\r\nconst input_password = document.querySelector('.password');\r\nconst button = document.querySelector('.password-button');\r\n\r\n\r\ninput_password.addEventListener('focusin', function(){\r\n    button.style.color = '#636363';\r\n}); \r\n\r\ninput_password.addEventListener('focusout', function(){\r\n    button.style.color = '#ffffff';\r\n});\r\n\r\nbutton.addEventListener('click', function() {\r\n    button.style.color = '#636363';\r\n    if (input_password.type === 'password') {\r\n        input_password.type = 'text';\r\n        button.innerHTML = 'Ocultar'\r\n    } else {\r\n        input_password.type = 'password'\r\n        button.innerHTML = 'Mostrar'\r\n    }\r\n});\r\n\r\nconst cpf = document.querySelector('input.cpf');\r\ncpf.addEventListener(\"blur\", function(){\r\n    cpf.value = cpf.value.match(/.{1,3}/g).join(\".\").replace(/\\.(?=[^.]*$)/,\"-\");\r\n});\r\n\r\n\r\n"],"names":["FormValidation","this","form","document","querySelector","events","addEventListener","e","handleSubmit","preventDefault","validFields","passwordFieldsValid","validPassword","alert","submit","valid","querySelectorAll","remove","field","placeholder","getAttribute","value","error","classList","contains","validateCPF","validateUsername","password","repeatPassword","length","user","match","ValidateCPF","msg","div","createElement","innerHTML","add","style","border","insertAdjacentElement","cpf","Object","defineProperty","writable","configurable","replace","cpfClear","charAt","repeat","cpf9Digits","slice","firstDigit","gerateDigit","secondDigit","newCPF","isSequence","generateNewCPF","total","reverse","stringOfCPF","Number","digit","String","input_password","button","color","type","join"],"sourceRoot":""}